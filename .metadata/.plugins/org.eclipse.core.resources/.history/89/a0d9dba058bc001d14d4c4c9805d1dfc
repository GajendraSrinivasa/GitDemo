package tests;

import io.restassured.RestAssured;
import io.restassured.filter.session.SessionFilter;
import io.restassured.path.json.JsonPath;

import static io.restassured.RestAssured.*;

import java.io.File;

import org.testng.Assert;

import files.payload;

public class Jira {
	
	public static void  main(String[] args) {
		
	// get the session ID, use SessionFilter class to catch the id.
		SessionFilter session = new SessionFilter();
		RestAssured.baseURI = "http://localhost:8080";
		String Resp = given().log().all().header("Content-Type","application/json").
		body(payload.loginCredentials()).filter(session).
		when().post("/rest/auth/1/session").
		then().extract().response().asString();
		System.out.println(Resp);
		
	// create an issue in jira	and get the issue id
	/*	String resp = given().log().all().header("Content-Type","application/json").
		body(payload.createIssue()).filter(session).
		when().post("/rest/api/2/issue").
		then().assertThat().statusCode(201).extract().response().asString();
		
		JsonPath js = ReUsableMethods.rawToJson(resp);
		String issueID = js.get("id");*/
		String issueID = "10206";
		
	// add a comment in the issue
		String commentBody = "you are on right path if u see the comment and check the comment id now";
		String commentDetails = given().pathParam("issue_id", issueID).log().all().header("Content-Type","application/json").
		body(payload.addComment(commentBody)).filter(session).
		when().post("/rest/api/2/issue/{issue_id}/comment").
		then().assertThat().statusCode(201).extract().response().asString();
		
		JsonPath js1 = ReUsableMethods.rawToJson(commentDetails);
		String commentID = js1.get("id");
	
	// add an attachment to the issue using multipart()	
		given().pathParam("issue_id", issueID).log().all().
		header("Content-Type","multipart/form-data").										// mandatory to add attachment
		header("X-Atlassian-Token", "no-check").    										// from JIRA documentation
		multiPart("file", new File("jira.txt")).filter(session).
		when().post("/rest/api/2/issue/{issue_id}/attachments").
		then().assertThat().statusCode(200);
		
		String getIssue = given().pathParam("issue_id", issueID).log().all().
				queryParam("fields", "comment").  // filter the response using query parameter
				filter(session).
				when().get("/rest/api/2/issue/{issue_id}").
				then().log().all().extract().response().asString();
		System.out.println(getIssue);
		
		JsonPath js2 = ReUsableMethods.rawToJson(getIssue);
		int commentCount = js2.getInt("fields.comment.comments.size()");
		//String extractComment = null;
		for(int i=0; i<commentCount; i++){
			String extractCommentId = js2.get("fields.comment.comments["+i+"].id").toString();
			if(extractCommentId.equalsIgnoreCase(commentID)){
				extractComment = js2.get("fields.comment.comments["+i+"].body").toString();	
				System.out.println(extractComment);
				Assert.assertEquals(extractComment, commentBody);
			}
		}
		
		
		
		
	}
}
